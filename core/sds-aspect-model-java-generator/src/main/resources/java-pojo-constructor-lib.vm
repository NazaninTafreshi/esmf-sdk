#* @vtlvariable name="deconstructionSets" type="java.util.List<io.openmanufacturing.sds.aspectmodel.java.DeconstructionSet>" *#
#* Note that in this macro $enableJacksonAnnotations overrides the value given in $codeGenerationConfig *#
#macro( constructorContent $deconstructionSets $needInitializer $allProperties $codeGenerationConfig $enableJacksonAnnotations $elementProperties )
    #if( $enableJacksonAnnotations )
        $codeGenerationConfig.getImportTracker().importExplicit( $JsonProperty )
        $codeGenerationConfig.getImportTracker().importExplicit( $JsonCreator )
        @JsonCreator
    #end
    public ${element.name}(
    #foreach( $property in $allProperties )
		#if( $enableJacksonAnnotations ) @JsonProperty( value = "$property.getPayloadName()" ) #end
        $util.getPropertyType( $property, false, $codeGenerationConfig ) $property.getPayloadName()
        #if( $foreach.hasNext ), #end
    #end
    ) #if( $needInitializer ) throws DatatypeConfigurationException #end {
    super(
	#foreach( $property in $allProperties )
    	#if( !$elementProperties.contains( $property ) )
			$property.getPayloadName()
		#end
	#end
	);
    #foreach( $property in $elementProperties )
        this.$property.getPayloadName() = $property.getPayloadName();
    #end
    #if( $needInitializer )
        final DatatypeFactory _datatypeFactory = DatatypeFactory.newInstance();
    #end
    #foreach( $deconstructionSet in $deconstructionSets )
    {
        final Pattern pattern = Pattern.compile( "${deconstructionSet.getDeconstructionRule().replaceAll("\\", "\\\\")}" );
        final Matcher matcher = pattern.matcher( ${deconstructionSet.getOriginalProperty().getName()}.toString() );
        if ( matcher.find() ) {
        #foreach( $property in $deconstructionSet.getElementProperties() )
            #set( $value = "matcher.group( ${foreach.count} )" )
            this.${property.name} = $util.generateInitializer( $property, $value, $codeGenerationConfig, $valueInitializer );
        #end
        }
    }
    #end
    }
#end

#macro( javaPojoConstructor )
#if ( $deconstructor.isApplicable() )
    $codeGenerationConfig.getImportTracker().importExplicit( $Matcher )
    $codeGenerationConfig.getImportTracker().importExplicit( $Pattern )
#end
#set( $deconstructionSets = $deconstructor.getDeconstructionSets() )
#set( $needInitializer = $valueInitializer.needInitializationToConstructor( $deconstructionSets ) )
#if ( $needInitializer )
    $codeGenerationConfig.getImportTracker().importExplicit( $DatatypeConfigurationException )
    $codeGenerationConfig.getImportTracker().importExplicit( $DatatypeConstants )
    $codeGenerationConfig.getImportTracker().importExplicit( $DatatypeFactory )
#end
#if ( $element.isComplex() && $element.getExtends().isPresent() )
	#set( $allPropertiesInPayload = $util.getAllPropertiesInPayload( $element ) )
	#set( $allProperties = $util.getAllProperties( $element ) )
	#set( $elementPropertiesInPayload = $util.getPropertiesInPayload( $element ) )
	#set( $elementProperties = $element.properties )
#else
	#set( $allPropertiesInPayload = $util.getPropertiesInPayload( $element ) )
	#set( $allProperties = $element.properties )
	#set( $elementPropertiesInPayload = $allPropertiesInPayload )
	#set( $elementProperties = $allProperties )
#end
#if ( $util.anyPropertyNotInPayload( $element ) )
    #constructorContent( $deconstructionSets $needInitializer $allProperties $codeGenerationConfig false $elementProperties )
    #constructorContent( $deconstructionSets $needInitializer $allPropertiesInPayload $codeGenerationConfig $codeGenerationConfig.doEnableJacksonAnnotations() $elementPropertiesInPayload )
#else
    #constructorContent( $deconstructionSets $needInitializer $allProperties $codeGenerationConfig $codeGenerationConfig.doEnableJacksonAnnotations() $elementProperties )
#end
#end

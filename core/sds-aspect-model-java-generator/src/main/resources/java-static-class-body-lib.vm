#parse( "java-static-class-property-lib.vm" )

#macro( javaStaticClassBody )
$codeGenerationConfig.getImportTracker().importExplicit( "${codeGenerationConfig.getPackageName()}.${element.getName()}" )
/**
* Generated class {@link Meta${element.getName()}}.
*/
public class Meta${element.getName()} implements StaticMetaClass<${element.getName()}>, PropertyContainer {
public static final String NAMESPACE = "${modelUrnPrefix}";
public static final String MODEL_ELEMENT_URN = NAMESPACE + "${element.getName()}";

private static String CHARACTERISTIC_NAMESPACE = "${characteristicBaseUrn}";

#propertyDeclaration() Meta${element.name} INSTANCE = new Meta${element.getName()}();

#foreach( $property in $deconstructor.getAllProperties() )
    #javaStaticClassProperty( $property $codeGenerationConfig )
#end
#foreach( $property in $element.getProperties() )
    #javaStaticClassProperty( $property $codeGenerationConfig )
#end

    public Class<${element.getName()}> getModelClass() {
        return ${element.getName()}.class;
    }

    @Override
    public AspectModelUrn getAspectModelUrn() {
       return AspectModelUrn.fromUrn( MODEL_ELEMENT_URN );
    }

    @Override
    public KnownVersion getMetaModelVersion() {
        return KnownVersion.${element.getMetaModelVersion().toString()};
    }

    @Override
    public String getName() {
        return "${element.getName()}";
    }

    @Override
    public List<StaticProperty<?>> getProperties() {
       return Arrays.asList(
        #foreach( $property in $element.getProperties() )
            $util.toConstant( $property.getName() )
            #if( $foreach.hasNext ), #end
        #end );
    }

#if( !$element.getPreferredNames().isEmpty() )
    $codeGenerationConfig.getImportTracker().importExplicit( $Map )
    $codeGenerationConfig.getImportTracker().importExplicit( $Collections )
    $codeGenerationConfig.getImportTracker().importExplicit( $Locale )
    @Override
    public Map<Locale, String> getPreferredNames() {
       Map<Locale, String> preferredNames = Collections.emptyMap();
       #foreach( $locale in $element.getPreferredNames().keySet() )
       preferredNames.put( Locale.forLanguageTag( "$locale.toLanguageTag()" ), "$StringEscapeUtils.escapeJava( $element.getPreferredNames().get( $locale ) )" );
       #end
       return preferredNames;
    }
#end

#if( !$element.descriptions.isEmpty() )
   $codeGenerationConfig.getImportTracker().importExplicit( $Map )
   $codeGenerationConfig.getImportTracker().importExplicit( $Collections )
   $codeGenerationConfig.getImportTracker().importExplicit( $Locale )
   @Override
   public Map<Locale, String> getDescriptions() {
      Map<Locale, String> descriptions = Collections.emptyMap();
       #foreach( $locale in $element.getDescriptions().keySet() )
       descriptions.put( Locale.forLanguageTag( "$locale.toLanguageTag()" ), "$StringEscapeUtils.escapeJava( $element.getDescriptions().get( $locale ) )" );
       #end
      return descriptions;
   }
#end

#if( !$element.getSee().isEmpty() )
    @Override
    public List<String> getSee() {
       return Arrays.asList(
        #foreach( $see in $element.getSee() )
            $util.createLiteral( $see )
            #if( $foreach.hasNext ), #end
        #end
       );
    }
#end

}
#end
